[[entities]]
name = "user_connection"
fields = [
  { name = "id", scalar = "Int", required = true, exclude_from_input = ["All"]  },
  { name = "uuid", scalar = "UUID", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },
  { name = "identifier", scalar = "String", required = true },
  { name = "user", scalar = "Int", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"], as_type = "user", join_on = "id", eager = true, default_value = "if(resolver_type() == \"CreateOne\", context(\"user.id\"), ())" },
  { name = "user_uuid", scalar = "UUID", is_virtual = true },
  { name = "connected_user", scalar = "Int", exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"], as_type = "user", join_on = "id", eager = true },
  { name = "status", scalar = "Boolean", required = true, exclude_from_input = ["CreateOne"] },
  { name = "accepted", scalar = "Boolean", required = true, exclude_from_input = ["CreateOne"] },
  { name = "accepted_at", scalar = "DateTime", excude_from_input = ["All"] },
  { name = "created_by", scalar = "Int", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"], as_type = "user", join_on = "id", eager = true, default_value = "if(resolver_type() == \"CreateOne\", context(\"user.id\"), ())" },
  { name = "updated_by", scalar = "Int", exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"], default_value = "context(\"user.id\")" }, 
  { name = "created_at", scalar = "DateTime", required = true, exclude_from_input = ["All"] },
  { name = "updated_at", scalar = "DateTime", required = true, exclude_from_input = ["All"] },
  { name = "revoked", scalar = "Boolean", required = true, exclude_from_input = ["CreateOne"] },
  { name = "revoked_at", scalar = "DateTime", exclude_from_input = ["All"] },
  { name = "revoked_by", scalar = "Int", exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] }
]

[entities.data_source]
from = "triceratask_ds"

[entities.data_source.resolvers]
[entities.data_source.resolvers.create_one]
[[entities.data_source.resolvers.create_one.guards]]
name = "Self Invite"
if_expr = "contains(input(\"values\", \"identifier\"), token_data(\"identifier\"))"
then_msg = "You cannot invite yourself."

[[entities.data_source.resolvers.create_one.guards]]
name = "Already Connected"
if_expr = '''
  len(context("user_connection.id")) > 0
'''
then_msg = "You are already connected with this user."
[[entities.data_source.resolvers.create_one.guards.context]]
entity_name = "user"
name = "user_connection_user"
query = '''
  {
    "get_users_input": {
      "query": {
        "AND": {{uuid}}
      } 
    }
  }
'''
variables = [
  ["{{uuid}}", "input(\"values\", \"user_uuid\")"]
]
[[entities.data_source.resolvers.create_one.guards.context]]
entity_name = "user_connection"
query = '''
  {
    "get_user_connections_input": {
      "query": {
        "AND": [
          { 
            "user": {
              "AND": {{id}}
            }
          },
          { "AND": {{identifier}} }
        ]
      } 
    }
  }
'''
variables = [
  ["{{id}}", "context(\"user_connection_user.id\")"],
  ["{{identifier}}", "input(\"values\", \"identifier\")"]
]

[[entities.data_source.resolvers.create_one.guards]]
name = "access_denied"
if_expr = '''
  !every(input("values", "user_uuid"), token_data("user_uuid"))
'''
then_msg = "You do not have permission to create connections on the behalf of this user."

[[entities.data_source.resolvers.update_many.guards]]
name = "already_revoked"
if_expr = '''
  is_revoking = contains(input("values", "revoked"), "true");
  is_revoked = contains(context("user_connection.revoked"), true);
  
  is_revoking && is_revoked
'''
then_msg = "You cannot revoke a connection that is already revoked."
[[entities.data_source.resolvers.update_many.guards.context]]
entity_name = "user_connection"
query = '''
  {
    "get_user_connections_input": {
      "query": {
        "AND": {{uuid}}
      } 
    }
  }
'''
variables = [
  ["{{uuid}}", "input(\"query\", \"uuid\")"]
]

[[entities.data_source.resolvers.update_many.guards]]
name = "access_denied"
if_expr = '''
  contains(input("values", "accepted"), "true") && contains(context("user_connection.accepted"), true)
'''
then_msg = "You cannot accept a connection that is already accepted."


