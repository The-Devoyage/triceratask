[[entities]]
name = "user_connection"
fields = [
  { name = "id", scalar = "Int", required = true, exclude_from_input = ["All"]  },
  { name = "uuid", scalar = "String", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },
  { name = "identifier", scalar = "String", required = true },
  { name = "user_uuid", scalar = "String", required = true, exclude_from_input = ["UpdateOne", "UpdateMany"], as_type = "user", join_on = "uuid" },
  { name = "connected_user_uuid", scalar = "String", exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"], as_type = "user", join_on = "uuid" },
  { name = "status", scalar = "Boolean", required = true, exclude_from_input = ["CreateOne"] },
  { name = "accepted", scalar = "Boolean", required = true, exclude_from_input = ["CreateOne"] },
  { name = "accepted_at", scalar = "String", excude_from_input = ["All"] },
  { name = "created_by", scalar = "String", required = true, exclude_from_input = ["UpdateOne", "UpdateMany"] },
  { name = "updated_by", scalar = "String", required = true }, 
  { name = "created_at", scalar = "String", required = true, exclude_from_input = ["All"] },
  { name = "updated_at", scalar = "String", required = true, exclude_from_input = ["All"] },
  { name = "revoked", scalar = "Boolean", required = true, exclude_from_input = ["CreateOne"] },
  { name = "revoked_at", scalar = "String", exclude_from_input = ["All"] }
]

[[entities.guards]]
name = "Permissions Error"
if_expr = """
  root_key = if(contains(("FindOne", "FindMany", "UpdateMany"), resolver_type()), "query", "values");
  contains_created_by = len(input(root_key, "created_by")) > 0;
  contains_connected_user_uuid = len(input(root_key, "connected_user_uuid")) > 0;
  provided_user_uuid = contains_created_by || contains_connected_user_uuid;

  should_guard = false;
  should_guard ||= !provided_user_uuid;
  should_guard ||= (contains_created_by && every(input(root_key, "created_by"), token_data("user_uuid")) == false);
  should_guard ||= (contains_connected_user_uuid && every(input(root_key, "connected_user_uuid"), token_data("user_uuid")) == false);

  should_guard
"""
then_msg = "You do not have access to this connection."

