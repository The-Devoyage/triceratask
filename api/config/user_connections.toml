name = "user_connection"
fields = [
  { name = "id", scalar = "Int", required = true, exclude_from_input = ["All"]  },
  { name = "uuid", scalar = "String", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },
  { name = "identifier", scalar = "String", required = true },
  { name = "user_uuid", scalar = "String", required = true, exclude_from_input = ["UpdateOne", "UpdateMany"], as_type = "user", join_on = "uuid" },
  { name = "connected_user_uuid", scalar = "String", exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"], as_type = "user", join_on = "uuid" },
  { name = "status", scalar = "Boolean", required = true, exclude_from_input = ["CreateOne"] },
  { name = "accepted", scalar = "Boolean", required = true, exclude_from_input = ["CreateOne"] },
  { name = "accepted_at", scalar = "Boolean", excude_from_input = ["All"] },
  { name = "created_by", scalar = "String", required = true, exclude_from_input = ["UpdateOne", "UpdateMany"] },
  { name = "updated_by", scalar = "String", required = true }, 
  { name = "created_at", scalar = "String", required = true, exclude_from_input = ["All"] },
  { name = "updated_at", scalar = "String", required = true, exclude_from_input = ["All"] },
  { name = "revoked", scalar = "Boolean", required = true, exclude_from_input = ["CreateOne"] },
  { name = "revoked_at", scalar = "String", exclude_from_input = ["All"] }
]
[service.entities.data_source]
from = "triceratask_ds"
[service.entities.data_source.resolvers]
[service.entities.data_source.resolvers.find_many]
[[service.entities.data_source.resolvers.find_many.guards]]
name = "Permissions Error"
if_expr = """
  should_guard = false;
  has_created_by = typeof(input("created_by")) != "empty";
  has_connected_user_uuid = typeof(input("connected_user_uuid")) != "empty";
  provided_user_id = has_created_by || has_connected_user_uuid;

  should_guard ||= !provided_user_id;
  should_guard ||= (has_created_by && token_data("user_uuid") != input("created_by"));
  should_guard ||= (has_connected_user_uuid && token_data("user_uuid") != input("connected_user_uuid"));

  should_guard
"""
then_msg = "Permission Denied - You do not have access to this connection."

[service.entities.data_source.resolvers.find_one]
[[service.entities.data_source.resolvers.find_one.guards]]
name = "Permissions Error"
if_expr = """
  should_guard = false;
  has_created_by = typeof(input("created_by")) != "empty";
  has_connected_user_uuid = typeof(input("connected_user_uuid")) != "empty";
  provided_user_id = has_created_by || has_connected_user_uuid;

  should_guard ||= !provided_user_id;
  should_guard ||= (has_created_by && token_data("user_uuid") != input("created_by"));
  should_guard ||= (has_connected_user_uuid && token_data("user_uuid") != input("connected_user_uuid"));

  should_guard
"""
then_msg = "Permission Denied - You do not have access to this connection."
